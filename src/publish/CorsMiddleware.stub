<?php

namespace App\Middleware;

use Hyperf\Context\Context;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

class CorsMiddleware implements MiddlewareInterface
{
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $response = Context::get(ResponseInterface::class);

//        $origin = $request->getHeaderLine('origin') ?: '*';
        $origin = '*';

        $response = $response
            ->withHeader('Server', 'server')
            ->withHeader('Access-Control-Allow-Origin', $origin)
            ->withHeader('Access-Control-Allow-Credentials', 'true')
            ->withHeader('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE,OPTIONS')
//            ->withHeader('Access-Control-Allow-Headers', '*');
//            ->withHeader('Access-Control-Allow-Headers', 'Content-Type,Authorization,X-Home-Token,X-ACCESS-TOKEN, X-ADMIN-SERVER-ACCESS-TOKEN')
            ->withHeader('Access-Control-Allow-Headers', 'DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization,X-Home-Token,X-ACCESS-TOKEN, X-ADMIN-SERVER-ACCESS-TOKEN')
            ->withHeader('Access-Control-Allow-Credentials', 'true')
            ->withHeader('Access-Control-Max-Age', '3600');

        Context::set(ResponseInterface::class, $response);

        if ($request->getMethod() == 'OPTIONS') {
            return $response;
        }

        return $handler->handle($request);
    }
}